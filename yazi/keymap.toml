# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[mgr]
prepend_keymap = [
  { on = "z", run = "plugin zoxide", desc = "Jump to a directory via zoxide"},
  { on = "Z", run = "plugin fzf", desc = "Jump to a file/dir via fzf"},
  { on = "T", run = "plugin toggle-pane max-preview", desc = "Fullscreen browse mode"},
  { on = "F", run = "plugin smart-filter", desc = "Smart filter" },
  { on = "M", run = "plugin mount", desc = "Check mount device status"},
  { on = "<C-d>", run = "plugin diff", desc = "Diff selected files with hovered ones" },
  { on = "i", run = 'plugin smart-enter', desc = "Smarter Enter"},
  { on = "<Enter>", run = 'plugin smart-enter', desc = "Smarter Enter"},
  { on = "S", run = 'shell "$SHELL" --block --confirm', desc = "Run Command"},
  { on = [
    "'",
    "a",
  ], run = "plugin yamb --args=save", desc = "Add bookmark" },
  { on = [
    "'",
    "'",
  ], run = "plugin yamb --args=jump_by_fzf", desc = "Jump bookmark by fzf" },
  { on = [
    "'",
    "r",
  ], run = "plugin yamb --args=delete_by_key", desc = "Delete bookmark by key" },
  { on = [
    "P",
  ], run = "spot", desc = "Open spotter" },
  { on = [
    "c",
    "a",
  ], run = "plugin compress", desc = "Archive selected files" },
  # Goto
  { on = [
    "g",
    "h",
  ], run = "cd ~/Desktop", desc = "Go home" },
  { on = [
    "g",
    "c",
  ], run = "cd %AppData%/yazi/config", desc = "Goto Yazi config dir" },
  { on = [
    "g",
    "d",
  ], run = "cd ~/Downloads", desc = "Goto ~/Downloads" },
  { on = [
    "g",
    "<Space>",
  ], run = "cd --interactive", desc = "Jump interactively" },
  { on = [
    "g",
    "p",
  ], run = "cd D:/Rust_projects", desc = "Goto Rust Projects" },
  { on = [
    "g",
    "o",
  ], run = "cd D:/obsidian-repos/obsidian-for-gitee", desc = "Goto Obsidian Repos" },
  { on = [
    "g",
    "z",
  ], run = "cd ~/OneDrive", desc = "Goto OneDrive Dir" },
  { on = [
    "g",
    "a",
  ], run = "cd %AppData%", desc = "Goto AppData Dir" },
  # { on = "-", run = "", desc = "Symlink the absolute path of yanked files" },
  # { on = "_", run = "PowerShell -Command \"$yanked = '%yanked%'; $relative = Resolve-Path $yanked -Relative; $link = Join-Path (Get-Location) (Split-Path $yanked -Leaf); if (Test-Path -Path $link) { Write-Host 'Link Existed' -ForegroundColor Red } else { cmd /c mklink $link $relative }\"", desc = "Symlink the relative path of yanked files" },
]
